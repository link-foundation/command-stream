name: Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/$.mjs'
      - 'tests/**'
      - 'package.json'
      - 'README.md'
      - '.github/workflows/deploy.yml'

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  findChangedFiles:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.changes.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- src/$.mjs tests/ package.json README.md .github/workflows/deploy.yml; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: findChangedFiles
    if: needs.findChangedFiles.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - run: bun install
      - run: bun test
      - run: bun test --coverage

  publishToNpm:
    runs-on: ubuntu-latest
    needs: [test, findChangedFiles]
    if: needs.findChangedFiles.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - run: bun install
      
      - name: Check if version exists
        id: version_check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          
          if npm view $PACKAGE_NAME@$PACKAGE_VERSION version 2>/dev/null; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION already exists on NPM"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Version $PACKAGE_VERSION does not exist on NPM, proceeding with publish"
          fi
      
      - name: Setup NPM Auth
        if: steps.version_check.outputs.version_exists == 'false'
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
          npm whoami
      
      - name: Publish to NPM
        if: steps.version_check.outputs.version_exists == 'false'
        run: |
          npm publish --access public
      
      - name: Create GitHub Release
        if: steps.version_check.outputs.version_exists == 'false'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.version_check.outputs.package_version }}
          release_name: Release v${{ steps.version_check.outputs.package_version }}
          body: |
            ## ðŸš€ New Release: ${{ steps.version_check.outputs.package_name }} v${{ steps.version_check.outputs.package_version }}
            
            ### ðŸ“¦ Installation
            ```bash
            npm install ${{ steps.version_check.outputs.package_name }}
            # or
            bun add ${{ steps.version_check.outputs.package_name }}
            ```
            
            ### ðŸ”— NPM Package
            [View on NPM](https://www.npmjs.com/package/${{ steps.version_check.outputs.package_name }}/v/${{ steps.version_check.outputs.package_version }})
            
            ### ðŸ“‹ Changes
            See [commit history](https://github.com/${{ github.repository }}/compare/v${{ steps.version_check.outputs.package_version }}...main) for details.
          draft: false
          prerelease: false